plugin.name=DevKit Plus
devkit.plus.family.name=DevKit Plus

# Light service inspections
inspection.light.service.must.be.final=Light Service class must be final.
inspection.light.service.registered.in.plugin.xml=Class is registered in plugin.xml. For Light service classes, having only the @Service annotation applied is enough. \
  If the service is meant to be overridden, the @Service annotation may be removed.
inspection.light.service.project.level.retrieved.via.application=Referenced class is marked as project service (@Service.Level.PROJECT) but is being retrieved as an application service.
inspection.light.service.app.level.retrieved.via.project=Referenced class is marked as application service (@Service.Level.APP) but is being retrieved as a project service.

# Light service generate actions
devkit.action.light.service.generate.static.getter.warning.message=Could not determine the service level based on the @Service annotation and the class name.
devkit.action.light.service.generate.static.getter.warning.title=Service Level Is not Recognized

# PersistentStateComponent intentions
devkit.intention.category=DevKit Plus
devkit.intention.convert.to.persistent.state.component.text=Convert to PersistentStateComponent...
devkit.intention.convert.to.persistent.state.component.family=Convert class to PersistentStateComponent
devkit.intention.persistent.state.use.standalone.state.object=Use standalone state object
devkit.intention.persistent.state.use.self.as.state=Use self as state

# Light services inlay hints
inlay.hints.light.services.display.mode.label=Display mode:
inlay.hints.light.services.view.all.light.services=View all light services...
inlay.hints.light.services.list.display.mode.group.title=-- {0} light services --
inlay.hints.light.services.view.all.popup.title=Light Services in This Project

inlay.hints.light.services.settings.type.title=Plugin light services
inlay.hints.light.services.settings.show.hints.option=Show hints
inlay.hints.light.services.settings.list.display.mode.preview.text=-- Project light services --,SomeProjectService,-- Application light services --,AwesomeApplicationService,View all light services...
inlay.hints.light.services.settings.display.mode.disabled=Disabled
inlay.hints.light.services.settings.display.mode.list.of.services=Show the list of light services
inlay.hints.light.services.settings.display.mode.view.all.only=Show 'View all light services' hint only
inlay.hints.light.services.settings.value.must.be.between.x.and.y=The value must be between {0} and {1}.
inlay.hints.light.services.settings.value.must.be.a.number=Please enter a number.
inlay.hints.light.services.settings.max.no.of.services.label=Max number of services to display:

# Service level
service.level.display.name.project=Project
service.level.display.name.app=Application
service.level.display.name.project.and.app=Project and application
service.level.display.name.not.sure=Unclassified

# CallMatcher
inspection.call.matcher.no.instance.method.with.name=No instance method exists with this name in the referenced class or any of its super classes.
inspection.call.matcher.no.exact.instance.method.with.name=No instance method exists with this name in the referenced class.
inspection.call.matcher.no.static.method.with.name=No static method exists with this name in the referenced class or any of its super classes.
intention.call.matcher.combine.to.any.of.name=Combine matchers to CallMatcher.anyOf()
intention.call.matcher.family.name=Combined CallMatchers to CallMatcher.anyOf()
intention.call.matcher.combine.to.any.of.select.class=Select Target Class

# UI
intention.ui.generate.multi.checkbox.panel=MultipleCheckboxOptionsPanel...
intention.ui.generate.single.checkbox.panel=SingleCheckboxOptionsPanel
intention.ui.generate.single.integer.field.options.panel=SingleIntegerFieldOptionsPanel
intention.ui.generate.convention.options.panel=ConventionOptionsPanel
intention.ui.select.panel.type.title=Select Panel Type
intention.ui.select.checkbox.count.title=Number of Checkboxes

# Caching
inspection.cached.value.provider.result.without.dependency=Result object is created without dependency. The Result class implementation says:\
  "No dependencies provided which causes CachedValue to be never recalculated again. If this is intentional, please use ModificationTracker.NEVER_CHANGED"
inspection.cached.value.provider.add.dependency.quick.fix=Add {0} as dependency
inspection.cached.value.provider.add.never.changed.quick.fix.family=CachedValueProvider fixes
inspection.cached.value.provider.replace.with.dependency.quick.fix=Replace empty collection with {0}

# localInspection EP folding
local.inspection.folding.option=plugin.xml: localInspection EP

# Expression optimization
inspection.empty.array.creation=You can use {0}.EMPTY_ARRAY instead.
inspection.replace.with.empty.array.constant=Replace with {0}.EMPTY_ARRAY
inspection.optimize.expressions.family=Expression can be optimized
inspection.replace.with.is.empty=Replace with {0}isEmpty()
inspection.use.expression.list.is.empty=You can call {0}isEmpty() instead.
